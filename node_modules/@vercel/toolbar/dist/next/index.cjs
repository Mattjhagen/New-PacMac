"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; } function _nullishCoalesce(lhs, rhsFn) { if (lhs != null) { return lhs; } else { return rhsFn(); } }var _chunkN32LB23Ccjs = require('../chunk-N32LB23C.cjs');var _scriptjs = require('next/script.js'); var _scriptjs2 = _interopRequireDefault(_scriptjs);var _unmountcjs = require('./unmount.cjs');var _localhostcontrollercjs = require('./localhost-controller.cjs');var _jsxruntime = require('react/jsx-runtime');var n=process.env.NODE_ENV==="development",o=n&&_chunkN32LB23Ccjs.c.call(void 0, ),d=o||["1","true"].includes(_nullishCoalesce(process.env.NEXT_PUBLIC_VERCEL_TOOLBAR_INJECT_IN_DEVELOPMENT, () => (""))),p=!n||d;n&&(o||console.log(`
You are rendering the Vercel Toolbar in development, but the configuration is missing.
Make sure the plugin is added to the Next.js config and the project has been linked using \`vercel link\`.
For more details, visit https://vercel.com/docs/workflow-collaboration/vercel-toolbar/in-production-and-localhost/add-to-localhost
`.trim()));function g(e){return p?_jsxruntime.jsxs.call(void 0, _jsxruntime.Fragment,{children:[o?_jsxruntime.jsx.call(void 0, _localhostcontrollercjs.LocalhostController,{nonce:e.nonce}):_jsxruntime.jsx.call(void 0, _scriptjs2.default,{strategy:"afterInteractive",...e,..._chunkN32LB23Ccjs.e.call(void 0, ),id:"vercel-toolbar",src:_chunkN32LB23Ccjs.a.call(void 0, ),"data-explicit-opt-in":"true"}),_jsxruntime.jsx.call(void 0, _unmountcjs.UnmountController,{shouldMount:!o,nonce:e.nonce})]}):null}exports.VercelToolbar = g;
